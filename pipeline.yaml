# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
 
# trigger:
#   none
 
# pool:
#   name: "poolcapstone"
 
# stages:
#   # Stage 1: Git Clone
#   - stage: GitClone
#     displayName: "Clone Repository"
#     jobs:
#       - job: CloneJob
#         displayName: "Clone Git Repository"
#         steps:
#           - checkout: self
#             displayName: "Checkout Source Code"

#   # Stage 2: Run Ansible Playbook to Install Terraform
#   - stage: RunAnsiblePlaybook 
#     displayName: "Run Ansible Playbook to Install"
#     dependsOn: GitClone
#     jobs:
#       - job: InstallTerraform
#         displayName: "Install Terraform"
#         steps:
#           - script: |
#               echo "Running Ansible playbook to install Terraform..."
#               ansible-playbook ./install-terraform.yaml  # This is the playbook you want to run
#             displayName: "Run install-terraform.yaml Playbook"


trigger:
  none

pool:
  name: "poolcapstone"

stages:
  # Stage 1: Git Clone
  - stage: GitClone
    displayName: "Clone Repository"
    jobs:
      - job: CloneJob
        displayName: "Clone Git Repository"
        steps:
          - checkout: self
            displayName: "Checkout Source Code"

  # Stage 2: Run Ansible Playbook to Install Terraform
  - stage: RunAnsiblePlaybook 
    displayName: "Run Ansible Playbook to Install"
    dependsOn: GitClone
    jobs:
      - job: InstallTerraform
        displayName: "Install Terraform"
        steps:
          - script: |
              echo "Running Ansible playbook to install Terraform..."
              ansible-playbook ./install-terraform.yaml  # Playbook for installing Terraform (adjust path)
            displayName: "Run install-terraform.yaml Playbook"

  # Stage 3: Terraform Deploy Infrastructure
  - stage: TerraformDeploy
    displayName: "Terraform Deploy Infrastructure"
    dependsOn: RunAnsiblePlaybook
    jobs:
      - job: TerraformJob
        displayName: "Run Terraform Commands"
        steps:
          # Azure CLI login step
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'connectionsaunak'  # Azure DevOps service connection for Azure
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "Logging into Azure CLI..."
                az account set --subscription 'f027d2e5-7ece-41c4-8a19-54dfa1d3491d'  # Set the correct subscription ID
            displayName: "Azure CLI Login"

          # Change the working directory to where your Terraform files are located
          - script: |
              cd terraform  # Change to your Terraform directory, if needed
              terraform init  # Initialize Terraform
              terraform plan -out=tfplan  # Plan infrastructure changes
            displayName: "Terraform Init and Plan"

          # Apply Terraform plan to create resources
          - script: |
              cd terraform  # Ensure you're in the Terraform directory
              terraform apply -auto-approve tfplan  # Apply the changes without confirmation
            displayName: "Terraform Apply"

          # Optional: Step to output Kubeconfig for AKS cluster
          - script: |
              echo $(terraform output -raw aks_kube_config) > $(System.DefaultWorkingDirectory)/kube_config.yaml
            displayName: "Save AKS Kubeconfig"

          # Optional: Verify AKS cluster (kubectl commands)
          - script: |
              kubectl --kubeconfig=$(System.DefaultWorkingDirectory)/kube_config.yaml get nodes
            displayName: "Verify AKS Cluster Nodes"
